#!/bin/zsh

# if [ "$TMUX" = "" ]; then
#  	if ! tmux info &>/dev/null; then
#  		# No tmux server started yet – drop straight into a shell
#  		tmux new-session
#  	else
#  		while true; do
# 			rand_suffix="$(openssl rand -hex 3)"
# 	 		choose_session="choose-${rand_suffix}"
# 
#  			tmux new-session -s "${choose_session}" \; \
#  				set-option destroy-unattached on \; \
#  				choose-tree \
#  				-F "(#{t:window_activity})#{?session_attached, (attached),}" \
#  				-f "#{==:0,#{m:choose-*,#{session_name}}}" \
#  				-t "${choose_session}" -s -O time -r
#  
#  			tmux kill-session -t "${choose_session}"
#  		done
#  	fi
# fi

export MONZO_AUTH_ENABLE_VPNLESS=true
export BRING_YOUR_OWN_GPG_AGENT=1
export ZSH_HOME="/usr/share/zsh"
export LANG=en_GB.UTF-8
export TERM=xterm-256color # Gets Tmux to behave sensibly with ZSH and truecolor

defaults write InitialKeyRepeat -int 8
defaults write KeyRepeat -int 1

ZSH_THEME="craigfe"

# Configure history
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000

setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt AUTO_PUSHD
setopt SHARE_HISTORY
setopt APPEND_HISTORY

# Prezto
source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"

export PATH="$HOME/.local/bin:$HOME/.scripts:$PATH:/opt/homebrew/bin:$HOME/.yarn/bin"
source $HOME/.scripts/functions

COMPLETION_WAITING_DOTS="false"

# Don't mark untracked files as dirty
DISABLE_UNTRACKED_FILES_DIRTY="true"

plugins=(git vi-mode ssh-agent)

source $HOME/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
source $HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source $HOME/.aliases
[ -f $HOME/.shortcuts/out/shell ] && source $HOME/.shortcuts/out/shell

# User configuration

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
  # export EDITOR="emacsclient --alternate-editor='emacs' --no-wait --create-frame"
fi

# ssh
export SSH_KEY_PATH="~/.ssh/rsa_id"

PROMPT_EOL_MARK=" •"

# Use the Vi navigation keys in menu completion
zstyle ':completion:*' menu select
zmodload zsh/complist

bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

bindkey '^[[[SE' autosuggest-execute

bindkey -s '^g' 'projectgoto\n'

# Jump (https://github.com/gsamokovarov/jump)
eval "$(jump shell)"

# OPAM configuration
. /home/craigfe/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

# AWS credentials
# . ~/.aws/get_credentials.sh

# Travis configuration
# [ -f /home/craigfe/.travis/travis.sh ] && source /home/craigfe/.travis/travis.sh

fh() {
    print -z $(history |\
                   fzf --no-sort --tac |\
                   sed -E 's/ *[0-9]*\*? *//; s/\\/\\\\/g')
}

ch() {
    local cols sep google_history open
    cols=$(( COLUMNS / 3 ))
    sep='{::}'

    if [ "$(uname)" = "Darwin" ]; then
        google_history="$HOME/Library/Application Support/Google/Chrome/Default/History"
        open=open
    else
        google_history="$HOME/.config/google-chrome/Default/History"
        open=xdg-open
    fi
    cp -f "$google_history" /tmp/h
    sqlite3 -separator $sep /tmp/h \
            "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
        awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
        fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}

# Nix configuration
export NIX_PATH="nixpkgs=https://github.com/NixOS/nixpkgs/archive/release-19.09.tar.gz"
export PATH="$PATH:$HOME/.nix-profile/bin"
export NIX_REMOTE=daemon

# Set up Node Version Manager
export NVM_DIR="$HOME/.nvm"
[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh" # This loads nvm
[ -s "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" ] && . "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion

# BRING_YOUR_OWN_GPG_AGENT=1
[ -f $HOME/src/github.com/monzo/starter-pack/zshrc ] && source $HOME/src/github.com/monzo/starter-pack/zshrc

# Go configuration
export GOTEST_SKIPNOTESTS=true

# Terraform
export TFENV_ARCH=arm64 # No `arm64` version shipped pre-1.0.2

autoload -U edit-command-line
zle -N edit-command-line
bindkey -M menuselect 'v' edit-command-line

# if [[ -n "${AWS_ASSUMED_ROLE}" ]]; then
#   PRETTY="${AWS_ASSUMED_ROLE}"
#   PS1="$(echo -e "\x1b[3m%F{gray}%K{black}$PRETTY%F{white}%K{none}\x1b[0m") $PS1"
# fi
#

export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/craigferguson/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/craigferguson/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/craigferguson/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/craigferguson/google-cloud-sdk/completion.zsh.inc'; fi
export USE_GKE_GCLOUD_AUTH_PLUGIN=True

source /Users/craigferguson/.docker/init-zsh.sh || true # Added by Docker Desktop

export JAVA_HOME=$(/usr/libexec/java_home -v 19)

adblogin() {
  droid deeplink $(£ -e s101 "api get /nonprod.test-user-email-log/magic-link recipient_email==\"$1\"" | jq .link -r);
}

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"
export PYENV_ROOT=$(brew --prefix)/var/pyenv
export PATH=$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH
if command -v pyenv 1>/dev/null 2>&1; then eval "$(pyenv init -)"; fi
source /Users/craigferguson/src/github.com/monzo/analytics/dbt/misc/shell/source.sh

export PATH="$PATH:/opt/homebrew/Cellar/janet/1.27.0/bin"
export EXPECT_DIFF_COMMAND="delta --file-style=omit --hunk-header-style=omit --line-numbers"
export EXPECT_COLOR="always"
eval "$(rbenv init -)"

autoload -U compinit
compinit

_monzo_cli_completions() {
  # Capture the current words and cursor position
  local wordsarr cword
  wordsarr=("${words[@]}")
  cword=$((CURRENT - 1))

  # Call your Go binary to generate completions
  local completions
  completions=($(/Users/craigferguson/src/github.com/monzo/wearedev/cli-completion "${wordsarr[*]}" "$cword"))

  _describe 'values' completions
  compadd -S '' "${completions[@]}"
}

compdef _monzo_cli_completions ££
